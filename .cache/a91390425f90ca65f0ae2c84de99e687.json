{"dependencies":[{"name":"C:\\Users\\ADMIN\\Desktop\\tensorflow-js\\handwritten-digit-recognition-canvas-draw\\package.json","includedInParent":true,"mtime":1589420220292},{"name":"C:\\Users\\ADMIN\\Desktop\\tensorflow-js\\handwritten-digit-recognition-canvas-draw\\.babelrc","includedInParent":true,"mtime":1589420220287},{"name":"C:\\Users\\ADMIN\\Desktop\\tensorflow-js\\handwritten-digit-recognition-canvas-draw\\node_modules\\abab\\package.json","includedInParent":true,"mtime":1589420518290}],"generated":{"js":"'use strict';\n\n/**\n * Implementation of atob() according to the HTML spec, except that instead of\n * throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(input) {\n  // WebIDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to calling String().\n  input = String(input);\n  // \"Remove all space characters from input.\"\n  input = input.replace(/[ \\t\\n\\f\\r]/g, '');\n  // \"If the length of input divides by 4 leaving no remainder, then: if\n  // input ends with one or two U+003D EQUALS SIGN (=) characters, remove\n  // them from input.\"\n  if (input.length % 4 == 0 && /==?$/.test(input)) {\n    input = input.replace(/==?$/, '');\n  }\n  // \"If the length of input divides by 4 leaving a remainder of 1, throw an\n  // INVALID_CHARACTER_ERR exception and abort these steps.\"\n  //\n  // \"If input contains a character that is not in the following list of\n  // characters and character ranges, throw an INVALID_CHARACTER_ERR\n  // exception and abort these steps:\n  //\n  // U+002B PLUS SIGN (+)\n  // U+002F SOLIDUS (/)\n  // U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9)\n  // U+0041 LATIN CAPITAL LETTER A to U+005A LATIN CAPITAL LETTER Z\n  // U+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER Z\"\n  if (input.length % 4 == 1 || !/^[+/0-9A-Za-z]*$/.test(input)) {\n    return null;\n  }\n  // \"Let output be a string, initially empty.\"\n  var output = '';\n  // \"Let buffer be a buffer that can have bits appended to it, initially\n  // empty.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  var buffer = 0;\n  var accumulatedBits = 0;\n  // \"While position does not point past the end of input, run these\n  // substeps:\"\n  for (var i = 0; i < input.length; i++) {\n    // \"Find the character pointed to by position in the first column of\n    // the following table. Let n be the number given in the second cell of\n    // the same row.\"\n    //\n    // \"Append to buffer the six bits corresponding to number, most\n    // significant bit first.\"\n    //\n    // atobLookup() implements the table from the spec.\n    buffer <<= 6;\n    buffer |= atobLookup(input[i]);\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append the three characters with code points\n    // equal to those numbers to output, in the same order, and then empty\n    // buffer.\"\n    accumulatedBits += 6;\n    if (accumulatedBits == 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by one character.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it\n  // contains 12 bits, discard the last four and interpret the remaining\n  // eight as an 8-bit big-endian number. If it contains 18 bits, discard the\n  // last two and interpret the remaining 16 as two 8-bit big-endian numbers.\n  // Append the one or two characters with code points equal to those one or\n  // two numbers to output, in the same order.\"\n  if (accumulatedBits == 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits == 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\nfunction atobLookup(chr) {\n  if (/[A-Z]/.test(chr)) {\n    return chr.charCodeAt(0) - 'A'.charCodeAt(0);\n  }\n  if (/[a-z]/.test(chr)) {\n    return chr.charCodeAt(0) - 'a'.charCodeAt(0) + 26;\n  }\n  if (/[0-9]/.test(chr)) {\n    return chr.charCodeAt(0) - '0'.charCodeAt(0) + 52;\n  }\n  if (chr == '+') {\n    return 62;\n  }\n  if (chr == '/') {\n    return 63;\n  }\n  // Throw exception; should not be hit in tests\n}\n\nmodule.exports = atob;\n","map":{"mappings":[{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\abab\\lib\\atob.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}}],"sources":{"node_modules\\abab\\lib\\atob.js":"'use strict';\n\n/**\n * Implementation of atob() according to the HTML spec, except that instead of\n * throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(input) {\n  // WebIDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to calling String().\n  input = String(input);\n  // \"Remove all space characters from input.\"\n  input = input.replace(/[ \\t\\n\\f\\r]/g, '');\n  // \"If the length of input divides by 4 leaving no remainder, then: if\n  // input ends with one or two U+003D EQUALS SIGN (=) characters, remove\n  // them from input.\"\n  if (input.length % 4 == 0 && /==?$/.test(input)) {\n    input = input.replace(/==?$/, '');\n  }\n  // \"If the length of input divides by 4 leaving a remainder of 1, throw an\n  // INVALID_CHARACTER_ERR exception and abort these steps.\"\n  //\n  // \"If input contains a character that is not in the following list of\n  // characters and character ranges, throw an INVALID_CHARACTER_ERR\n  // exception and abort these steps:\n  //\n  // U+002B PLUS SIGN (+)\n  // U+002F SOLIDUS (/)\n  // U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9)\n  // U+0041 LATIN CAPITAL LETTER A to U+005A LATIN CAPITAL LETTER Z\n  // U+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER Z\"\n  if (input.length % 4 == 1 || !/^[+/0-9A-Za-z]*$/.test(input)) {\n    return null;\n  }\n  // \"Let output be a string, initially empty.\"\n  var output = '';\n  // \"Let buffer be a buffer that can have bits appended to it, initially\n  // empty.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  var buffer = 0;\n  var accumulatedBits = 0;\n  // \"While position does not point past the end of input, run these\n  // substeps:\"\n  for (var i = 0; i < input.length; i++) {\n    // \"Find the character pointed to by position in the first column of\n    // the following table. Let n be the number given in the second cell of\n    // the same row.\"\n    //\n    // \"Append to buffer the six bits corresponding to number, most\n    // significant bit first.\"\n    //\n    // atobLookup() implements the table from the spec.\n    buffer <<= 6;\n    buffer |= atobLookup(input[i]);\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append the three characters with code points\n    // equal to those numbers to output, in the same order, and then empty\n    // buffer.\"\n    accumulatedBits += 6;\n    if (accumulatedBits == 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by one character.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it\n  // contains 12 bits, discard the last four and interpret the remaining\n  // eight as an 8-bit big-endian number. If it contains 18 bits, discard the\n  // last two and interpret the remaining 16 as two 8-bit big-endian numbers.\n  // Append the one or two characters with code points equal to those one or\n  // two numbers to output, in the same order.\"\n  if (accumulatedBits == 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits == 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\nfunction atobLookup(chr) {\n  if (/[A-Z]/.test(chr)) {\n    return chr.charCodeAt(0) - 'A'.charCodeAt(0);\n  }\n  if (/[a-z]/.test(chr)) {\n    return chr.charCodeAt(0) - 'a'.charCodeAt(0) + 26;\n  }\n  if (/[0-9]/.test(chr)) {\n    return chr.charCodeAt(0) - '0'.charCodeAt(0) + 52;\n  }\n  if (chr == '+') {\n    return 62;\n  }\n  if (chr == '/') {\n    return 63;\n  }\n  // Throw exception; should not be hit in tests\n}\n\nmodule.exports = atob;\n"},"lineCount":110}},"hash":"15d7f9e7d55ead3863f6775295e88ded","cacheData":{"env":{}}}