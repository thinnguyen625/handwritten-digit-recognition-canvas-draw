{"dependencies":[{"name":"C:\\Users\\ADMIN\\Desktop\\tensorflow-js\\handwritten-digit-recognition-canvas-draw\\package.json","includedInParent":true,"mtime":1589420220292},{"name":"C:\\Users\\ADMIN\\Desktop\\tensorflow-js\\handwritten-digit-recognition-canvas-draw\\.babelrc","includedInParent":true,"mtime":1589420220287},{"name":"C:\\Users\\ADMIN\\Desktop\\tensorflow-js\\handwritten-digit-recognition-canvas-draw\\node_modules\\jsdom\\package.json","includedInParent":true,"mtime":1589420517786},{"name":"parse5","loc":{"line":2,"column":23}},{"name":"./parse5-adapter-serialization","loc":{"line":3,"column":28}},{"name":"../living/node-type","loc":{"line":4,"column":26}}],"generated":{"js":"\"use strict\";\nconst parse5 = require(\"parse5\");\nconst treeAdapter = require(\"./parse5-adapter-serialization\");\nconst NODE_TYPE = require(\"../living/node-type\");\n\nexports.domToHtml = iterable => {\n  let ret = \"\";\n  for (const node of iterable) {\n    if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n      ret += parse5.serialize(node, { treeAdapter });\n    } else {\n      // TODO: maybe parse5 can give us a hook where it serializes the node itself too:\n      // https://github.com/inikulin/parse5/issues/230\n      ret += parse5.serialize({ childNodesForSerializing: [node] }, { treeAdapter });\n    }\n  }\n  return ret;\n};\n","map":{"mappings":[{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"node_modules\\jsdom\\lib\\jsdom\\browser\\domtohtml.js":"\"use strict\";\nconst parse5 = require(\"parse5\");\nconst treeAdapter = require(\"./parse5-adapter-serialization\");\nconst NODE_TYPE = require(\"../living/node-type\");\n\nexports.domToHtml = iterable => {\n  let ret = \"\";\n  for (const node of iterable) {\n    if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n      ret += parse5.serialize(node, { treeAdapter });\n    } else {\n      // TODO: maybe parse5 can give us a hook where it serializes the node itself too:\n      // https://github.com/inikulin/parse5/issues/230\n      ret += parse5.serialize({ childNodesForSerializing: [node] }, { treeAdapter });\n    }\n  }\n  return ret;\n};\n"},"lineCount":19}},"hash":"8f0d6a6a171bf55410c1f0b759d1dad8","cacheData":{"env":{}}}